---
- name: Install selinux policy
  ansible.builtin.command: "semodule -v -i jws{{ jws_version.split('.')[0] | default('6') }}-tomcat.pp"
  args:
    chdir: "{{ jws_home }}/selinux"
  listen: "Selinux policy created"
  register: semodule
  changed_when: semodule.rc == 0
  failed_when: semodule.rc != 0

- name: Apply selinux policy
  ansible.builtin.command: "restorecon -F -r -v {{ jws_home }}"
  listen: "Apply selinux policy"
  register: restorecon
  changed_when: restorecon.stdout_lines | length > 0

- name: Reload Systemd
  become: yes
  ansible.builtin.systemd:
    daemon_reload: yes
  when:
    - jws.service is defined
    - jws.service.enabled is defined
    - jws.service.enabled
  listen: "Systemd reload"

- name: "Ensure {{ jws.service.hr_name }} runs under systemd"
  ansible.builtin.include_tasks: tasks/systemd/service.yml
  when:
    - jws.service is defined
    - jws.service.enabled is defined
    - jws.service.enabled
  listen: "Ensure Tomcat runs under systemd"

- name: "Ensure systemd service for {{ jws.service.hr_name }} is stopped."
  ansible.builtin.include_tasks: tasks/systemd/stop.yml
  when:
    - jws.service is defined
    - jws.service.enabled is defined
    - jws.service.enabled
  listen: "Stop Tomcat service"

- name: "Restart {{ jws.service.hr_name }} service"
  become: yes
  ansible.builtin.service:
    name: "{{ jws.service.name }}"
    state: restarted
    enabled: true
  when:
    - jws.service is defined
    - jws.service.enabled is defined
    - jws.service.enabled
  listen: "Restart Tomcat service"

- name: Notify new patch is available
  ansible.builtin.debug:
    msg: "WARNING: Your configuration defines patch version: {{ jws_patch_version }} new patch is available: {{ jws_latest_version }}"
  listen: "new patch available"
  changed_when: True
