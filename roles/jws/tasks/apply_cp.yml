---
- name: Check arguments
  assert:
    that:
      - tomcat.rhn.username is defined
      - tomcat.rhn.password is defined
      - tomcat.install_dir is defined
    quiet: true
    fail_msg: "One or more required parameters for cumulative patch application is missing."

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ tomcat.rhn.patch_bundle }}"
  register: local_archive_path
  delegate_to: localhost

# check remote patch archive
- name: Set download patch archive path
  ansible.builtin.set_fact:
    patch_archive: "{{ tomcat.install_dir }}/{{ tomcat.rhn.patch_bundle }}"

- name: Check download patch archive path
  ansible.builtin.stat:
    path: "{{ patch_archive }}"
  register: patch_archive_path

- name: Perform patch download from RHN
  middleware_automation.redhat_csp_download.redhat_csp_download:
    url: "{{ tomcat.rhn.cpatch_zipfile_url }}"
    dest: "{{ local_path.stat.path }}/{{ tomcat.rhn.patch_bundle }}"
    username: "{{ rhn_username }}"
    password: "{{ rhn_password }}"
  no_log: "{{ omit_rhn_output | default(true) }}"
  delegate_to: localhost
  when:
    - patch_archive_path is defined
    - patch_archive_path.stat is defined
    - not patch_archive_path.stat.exists
    - not local_archive_path.stat.exists

## copy and unpack
- name: Copy patch archive to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ tomcat.rhn.patch_bundle }}"
    dest: "{{ patch_archive }}"
    owner: "{{ tomcat.user }}"
    group: "{{ tomcat.group }}"
    mode: 0640
  register: new_version_downloaded
  when:
    - not patch_archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: yes

- name: "Check patch state"
  stat:
    path: "{{ patch_archive }}"
  register: patch_info

- set_fact:
    patch_checksum_file: "{{ tomcat.home }}/../.applied_patch_checksum_{{ patch_info.stat.checksum }}.txt"
  when:
    - patch_info is defined

- name: "Check {{ patch_checksum_file }} state"
  stat:
    path: "{{ patch_checksum_file }}"
  register: last_patch_status

- name: Print when patch has been applied already
  debug:
    msg: "Patch v{{ jws.rhn_ids[jws_version].latest_cp.v }} (checksum {{ patch_info.stat.checksum }}) has already been applied."
  when:
    - last_patch_status.stat.exists

- block:
    - name: "Update {{ tomcat.home }} with downloaded Cumulative Patch"
      unarchive:
        src: "{{ patch_archive }}"
        dest: "{{ tomcat.install_dir }}"
        remote_src: yes
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0750
      notify:
        - Restart Tomcat service
      when:
        - not last_patch_status.stat.exists

    - name: Set checksum file
      copy:
        dest: "{{ patch_checksum_file }}"
        content: "Patch v{{ jws.rhn_ids[jws_version].latest_cp.v }}"
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0640
      when:
        - not last_patch_status.stat.exists
  when:
    - patch_archive_path is defined
    - patch_archive_path.stat is defined
    - last_patch_status is defined
    - last_patch_status.stat is defined
  rescue:
    - debug:
        msg: "This should NEVER happen, something is wrong."
