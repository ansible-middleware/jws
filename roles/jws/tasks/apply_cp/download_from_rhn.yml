---
- name: Perform patch download from RHN via JBossNetwork API
  delegate_to: localhost
  run_once: yes
  when:
    - jws_apply_patches
  block:
    - name: Retrieve product download using JBossNetwork API
      ansible.builtin.include_tasks: rhn/search.yml
      vars:
        rhn_product_type: BUGFIX
        rhn_product_version: "{{ jws_version.split('.')[:2] | join('.') }}"
        rhn_product_category: "{{ jws_product_category }}"

    - name: Determine patch versions list
      ansible.builtin.set_fact:
        filtered_versions: "{{ rhn_products.results | map(attribute='file_path') | select('match', '^[^/]*/jws-.*[0-9]*[.][0-9]*[.][0-9]*.*$') | map('regex_replace', '[^/]*/jws-([0-9]*[.][0-9]*[.][0-9]*)-.*', '\\1') | list | unique }}"
      delegate_to: localhost
      run_once: yes

    - name: Determine latest version
      ansible.builtin.set_fact:
        jws_latest_version: "{{ filtered_versions | middleware_automation.common.version_sort | last }}"
      delegate_to: localhost
      run_once: yes

    - name: Determine install zipfile from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '[^/]*/jws-' + jws_latest_version + archive_file_suffix + '$') }}"
        patch_bundle: "jws-{{ jws_latest_version }}{{ archive_file_suffix }}"
        patch_version: "{{ jws_latest_version }}"
      when: jws_patch_version is not defined or jws_patch_version | length == 0
      delegate_to: localhost
      run_once: yes

    - name: "Compute patch to apply (if any)."
      when:
        - rhn_products.results is defined and rhn_products.results | length > 0
      block:
        - name: "Determine selected patch from supplied version: {{ jws_patch_version }}"
          ansible.builtin.set_fact:
            rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', '[^/]*/jws-' + jws_patch_version + archive_file_suffix + '$') }}"
            patch_bundle: "jws-{{ jws_patch_version }}{{ archive_file_suffix }}"
            patch_version: "{{ jws_patch_version }}"
          when: jws_patch_version is defined and jws_patch_version | length > 0
          delegate_to: localhost
          run_once: yes

        - name: Check latest version against requested version
          ansible.builtin.set_fact:
            important_fact: "new patch available"
          changed_when: jws_patch_version != jws_latest_version
          when:
            - jws_patch_version is defined and jws_patch_version | length > 0
            - jws_patch_notify_new_version is defined and jws_patch_notify_new_version
          notify: new patch available

        - name: Download Red Hat JWS patch
          ansible.builtin.include_tasks: rhn/download.yml
          vars:
            rhn_product_id: "{{ (rhn_filtered_products | first).id }}"
            rhn_product_path: "{{ jws_archive_repository }}/{{ patch_bundle }}"
          when:
            - rhn_filtered_products | length > 0

- name: "Compute required paths (if patch selected)."
  block:

    - name: "Set path to patch bundle file archive on target (if not set)."
      ansible.builtin.set_fact:
        path_to_patch_bundle_on_target: "/opt/{{ patch_bundle }}"
      when:
        - not path_to_patch_bundle_on_target is defined or 'reset' in path_to_patch_bundle_on_target

    - name: "Set path to patch bundle file archive locally (if not set)."
      ansible.builtin.set_fact:
        downloaded_patch_bundle_file: "{{ jws_archive_repository }}/{{ patch_bundle }}"
      when:
        - not downloaded_patch_bundle_file is defined or 'reset' in downloaded_patch_bundle_file
