---
- name: Perform patch download from RHN via JBossNetwork API
  delegate_to: localhost
  run_once: true
  when:
    - jws_apply_patches
    - not jws_offline_install
  block:
    - name: Retrieve product download using JBossNetwork API
      ansible.builtin.include_tasks: rhn/search.yml
      vars:
        rhn_product_type: BUGFIX
        rhn_product_version: "{{ jws_version.split('.')[:2] | join('.') }}"
        rhn_product_category: "{{ jws_product_category }}"
        rhn_file_suffix: "{{ archive_file_suffix }}"

    - name: Determine patch versions list
      ansible.builtin.set_fact:
        filtered_versions: "{{ rhn_products.results | map(attribute='file_path') | \
                               select('match', '^[^/]*/jws-.*[0-9]*[.][0-9]*[.][0-9]*.*$') | \
                               map('regex_replace', '[^/]*/jws-([0-9]*[.][0-9]*[.][0-9]*)-.*', '\\1') | \
                               list | unique }}"
      when:
        - rhn_products.results is defined and rhn_products.results | length > 0
      delegate_to: localhost
      run_once: true

    - name: Determine latest version
      ansible.builtin.set_fact:
        jws_latest_version: "{{ filtered_versions | middleware_automation.common.version_sort | last }}"
      when:
        - rhn_products.results is defined and rhn_products.results | length > 0
      delegate_to: localhost
      run_once: true

    - name: Determine install zipfile from search results
      ansible.builtin.set_fact:
        rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', \
                                   '[^/]*/jws-' + jws_latest_version + archive_file_suffix + '$') }}"
        patch_bundle: "jws-{{ jws_latest_version }}{{ archive_file_suffix }}"
        patch_version: "{{ jws_latest_version }}"
      when:
        - jws_patch_version is not defined or jws_patch_version | length == 0
        - rhn_products.results is defined and rhn_products.results | length > 0
      delegate_to: localhost
      run_once: true

    - name: "Compute patch to apply (if any)."
      when:
        - rhn_products.results is defined and rhn_products.results | length > 0
      block:
        - name: "Determine selected patch from supplied version: {{ jws_patch_version }}"
          ansible.builtin.set_fact:
            rhn_filtered_products: "{{ rhn_products.results | selectattr('file_path', 'match', \
                                       '[^/]*/jws-' + jws_patch_version + archive_file_suffix + '$') }}"
            patch_bundle: "jws-{{ jws_patch_version }}{{ archive_file_suffix }}"
            patch_version: "{{ jws_patch_version }}"
          when: jws_patch_version is defined and jws_patch_version | length > 0
          delegate_to: localhost
          run_once: True

        - name: Check latest version against requested version
          ansible.builtin.set_fact:
            important_fact: "new patch available"
          changed_when: jws_patch_version != jws_latest_version
          when:
            - jws_patch_version is defined and jws_patch_version | length > 0
            - jws_patch_notify_new_version is defined and jws_patch_notify_new_version
          notify: new patch available

        - name: Download Red Hat JWS patch
          ansible.builtin.include_tasks: rhn/download.yml
          vars:
            rhn_product_id: "{{ (rhn_filtered_products | first).id }}"
            rhn_product_path: "{{ jws_archive_repository }}/{{ patch_bundle }}"
          when:
            - rhn_filtered_products | length > 0

        - name: Set whether patches are available for version
          ansible.builtin.set_fact:
            patch_available_to_apply: "{{ rhn_filtered_products | length > 0 }}"

    - name: "No patch available"
      when:
        - rhn_products.results is not defined or rhn_products.results | length == 0
      block:
        - name: Display no patches are available for version
          ansible.builtin.debug:
            msg: "No cumulative patches are available for base version {{ jws_version }}"

        - name: Set no patches are available for version
          ansible.builtin.set_fact:
            patch_available_to_apply: false
