---
- name: Check arguments
  assert:
    that:
      - tomcat.rhn.server_zipfile_url is defined
      - tomcat.rhn.server_zipfile_url | length > 0
    quiet: true
    fail_msg: "You need to provide"

- set_fact:
    tomcat_zipfile: "jws-{{ jws_version }}-application-server.zip"
    native_zipfile: "jws-{{ jws_version }}-application-server-RHEL{{ ansible_facts['distribution_major_version'] }}-x86_64.zip"
  when:
    - jws_version is defined

- name: Check download archive path
  ansible.builtin.stat:
    path: "{{ tomcat_install_dir }}/{{ tomcat_zipfile }}"
  register: archive_path

- name: Check download archive path
  ansible.builtin.stat:
    path: "{{ tomcat_install_dir }}/{{ native_zipfile }}"
  register: native_archive_path

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ lookup('env', 'PWD') }}"
  register: local_path
  delegate_to: localhost

- name: Check downloaded archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ tomcat_zipfile }}"
  register: local_archive_path
  delegate_to: localhost

- name: Check downloaded native archive
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ native_zipfile }}"
  register: local_native_archive_path
  delegate_to: localhost

- name: "Install JWS with zipfile from RHN: {{ tomcat.rhn.server_zipfile_url }}"
  redhat_csp_download:
    url: "{{ tomcat.rhn.server_zipfile_url }}"
    dest: "{{ tomcat_zipfile }}"
    username: "{{ tomcat.rhn.username }}"
    password: "{{ tomcat.rhn.password }}"
  delegate_to: localhost
  register: new_version_downloaded
  when:
    - not archive_path.stat.exists

- name: "Install JWS native dependencies with zipfile from RHN: {{ tomcat.rhn.native_zipfile_url }}"
  redhat_csp_download:
    url: "{{ tomcat.rhn.native_zipfile_url }}"
    dest: "{{ native_zipfile }}"
    username: "{{ tomcat.rhn.username }}"
    password: "{{ tomcat.rhn.password }}"
  delegate_to: localhost
  when:
    - not native_archive_path.stat.exists
    - native_zipfile_url is defined
    - native_zipfile_url | length > 0

- name: Copy archives to target nodes
  ansible.builtin.copy:
    src: "{{ local_path.stat.path }}/{{ item }}"
    dest: "{{ tomcat_install_dir }}/{{ item }}"
    owner: "{{ tomcat.user }}"
    group: "{{ tomcat.group }}"
    mode: 0640
  register: new_version_downloaded
  loop:
    - "{{ tomcat_zipfile }}"
    - "{{ native_zipfile }}"
  when:
    - not archive_path.stat.exists or not native_archive_path.stat.exists
    - local_archive_path.stat is defined
    - local_archive_path.stat.exists
  become: yes
