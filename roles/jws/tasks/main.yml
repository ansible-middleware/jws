---
- name: "Check that tomcat.home has been defined."
  assert:
    that:
      - tomcat.home is defined
      - tomcat.home | length > 0

- name: "Install required dependencies"
  include_tasks: fastpackage.yml
  vars:
    package_name: "{{ item }}"
  loop:
    - zip
    - unzip

- include_tasks: java_install.yml
  when: tomcat_java_version is defined

- block:
    - name: "Create group: {{ tomcat.group }}"
      group:
        name: "{{ tomcat.group }}"

    - name: "Create user for tomcat: {{ tomcat.user }}"
      user:
        name: "{{ tomcat.user }}"
        groups: "{{ tomcat.group }}"
        comment: "User for Apache Tomcat"

    - name: "Ensure install dir is created: {{ tomcat_install_dir }}"
      file:
        path: "{{ tomcat_install_dir }}"
        state: directory
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0750
      when:
        - tomcat.install_method is defined
        - tomcat.install_method != "rpm"

    - include_tasks: install.yml
      when:
        - tomcat.install_method is defined

    - include_tasks: systemd/systemd.yml
      when:
        - tomcat.install_method is defined
        - tomcat.install_method != "rpm"
        - tomcat.service is defined
        - tomcat.service.enabled is defined
        - tomcat.service.enabled

    - name: "Ensure {{ tomcat.home }}/{{ item }}/ has appropriate privileges."
      file:
        path: "{{ tomcat.home }}/{{ item }}/"
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0750
        state: directory
      loop:
        - conf
        - temp
        - logs
        - webapps
        - bin

    - name: "Ensure {{ item }} has the recommended priviliges, owner and group"
      file:
        path: "{{ item }}"
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0600
      loop:
        - "{{ tomcat.home }}/{{ tomcat.conf.properties }}"
        - "{{ tomcat.home }}/{{ tomcat.conf.policy }}"
        - "{{ tomcat.home }}/{{ tomcat.conf.logging }}"
        - "{{ tomcat.home }}/conf/tomcat-users.xml"
        - "{{ tomcat.home }}/conf/jaspic-providers.xml"

    - name: "Deploy custom configuration file from {{ item.template }}"
      template:
        src: "{{ item.template }}"
        dest: "{{ item.dest }}"
        owner: "{{ tomcat.user }}"
        group: "{{ tomcat.group }}"
        mode: 0600
      loop:
        - { template: "{{ tomcat.conf.templates.server }}", dest: "{{ tomcat.home }}/{{ tomcat.conf.server }}" }
        - { template: "{{ tomcat.conf.templates.web }}", dest: "{{ tomcat.home }}/{{ tomcat.conf.web }}" }
        - { template: "{{ tomcat.conf.templates.context }}", dest: "{{ tomcat.home }}/{{ tomcat.conf.context }}" }
      notify:
        - Restart Tomcat service

    - name: "Remove app: {{ item }}"
      file:
        path: "{{ tomcat.home }}/webapps/{{ item }}"
        state: absent
      loop: "{{ tomcat.apps.to_remove }}"
      when: tomcat.apps.to_remove is defined

    - block:
        - name: Copy tomcat vault file from control node to remote
          copy:
            src: "{{ tomcat.vault.name }}"
            dest: "{{ tomcat.home }}/"

        - name: Initialize tomcat vault
          command:
            cmd: "{{ tomcat.home }}/bin/tomcat-vault.sh --keystore {{ tomcat.home }}/vault.keystore --keystore-password {{ tomcat.vault.storepass }} --alias {{ tomcat.vault.alias }} --enc-dir {{ tomcat.home }} --iteration {{ tomcat.vault.iteration }} --salt {{ tomcat.vault.salt }} -g {{ tomcat.home }}/{{ tomcat.vault.properties }}"
      when: tomcat.vault.enable
  when: tomcat_setup
