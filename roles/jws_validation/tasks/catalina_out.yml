---
- name: Read the content of catalina.out
  ansible.builtin.slurp:
    src: "{{ jws_home }}/{{ catalina_logfile }}"
  register: catalina_out

- name: "Set number of characters in {{ catalina_logfile }}"
  ansible.builtin.set_fact:
    catalina_out_content: "{{ catalina_out['content'] | b64decode }}"
    nb_chars_in_catalina_log: "{{ catalina_out['content'] | b64decode | length }}"

- name: "Check that {{ catalina_logfile }} is not empty."
  ansible.builtin.assert:
    that:
      - nb_chars_in_catalina_log is defined
      - nb_chars_in_catalina_log | int > jws_validation_catalina_out_min_size
    quiet: True

- name: "Set expected string for fail error message."
  ansible.builtin.set_fact:
    severe_error_label: "SEVERE"

- name: Fail if logfile contains ERRORs
  ansible.builtin.assert:
    that:
      - not severe_error_label in catalina_out_content
    quiet: true
    fail_msg: "Catalina logfile contains SEVERE error lines."
  when:
    - not jws_validation_allow_errors_in_catalina_log is defined

- name: Fail if unexpected JVM is found
  ansible.builtin.assert:
    that:
      - "'JVM Version:           {{ jws_java_version }}' in catalina_out_content"
    quiet: true
    fail_msg: "The service is not running on the expected JVM."
  when:
    - jws_java_version is defined

- name: "Test JWS specific features"
  block:
    - name: "Set expected strings"
      ansible.builtin.set_fact:
        loaded_native_libs: "Loaded Apache Tomcat Native library"

    - name: Fail if native is installed but fails to start
      ansible.builtin.assert:
        that:
          - loaded_native_libs in catalina_out_content
        quiet: true
        fail_msg: "Tomcat native extensions failed to load."
      when:
        - jws_native is defined
        - jws_native

    - name: "Check that ModCluster Listener is loaded (if enabled)."
      ansible.builtin.assert:
        that:
          - catalina_out_content | regex_findall('Initializing mod_cluster version', multiline=True) | length != 0
        success_msg: "ModCluster Listener is loaded."
        fail_msg: "ModCluster listener is not loaded!"
      when:
        - jws_modcluster_enabled is defined
        - jws_modcluster_enabled
  when:
    - jws_version is defined

- name: "Check that expected, specific strings are in {{ catalina_logfile }}, if provided, and fails if not found"
  ansible.builtin.assert:
    that:
      - string_in_log in catalina_out_content
    quiet: True
    fail_msg: "String {{ string_in_log }} has NOT been found in {{ catalina_logfile }}."

  loop: "{{ jws_validation_strings_in_catalina }}"
  loop_control:
    loop_var: string_in_log
  when:
    - jws_validation_strings_in_catalina is defined
    - jws_validation_strings_in_catalina | length > 0

- name: "Check that unexpected, provided strings are NOT in {{ catalina_logfile }}, and fails if found"
  ansible.builtin.assert:
    that:
      - string_not_in_log in catalina_out_content
    quiet: True
    fail_msg: "String {{ string_not_in_log }} has been FOUND in {{ catalina_logfile }}"
  loop: "{{ jws_validation_strings_not_in_catalina }}"
  loop_control:
    loop_var: string_not_in_log
  when:
    - jws_validation_strings_not_in_catalina is defined
    - jws_validation_strings_not_in_catalina | length > 0
